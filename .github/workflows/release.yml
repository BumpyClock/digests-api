name: Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-linux:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build binary
      env:
        GOOS: linux
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 1
      run: |
        cd src
        OUTPUT_NAME="digests-api-linux-${{ matrix.arch }}"
        
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          export CC=aarch64-linux-gnu-gcc
        fi
        
        go build -v -ldflags="-s -w" -o ../build/${OUTPUT_NAME} ./cmd/api
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: digests-api-${{ matrix.os }}-${{ matrix.arch }}
        path: build/digests-api-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the upload URL from the release
        upload_url="${{ steps.create_release.outputs.upload_url }}"
        
        # Upload each artifact
        for artifact in artifacts/*/digests-api-*; do
          if [ -f "$artifact" ]; then
            filename=$(basename "$artifact")
            echo "Uploading $filename"
            
            # Determine content type
            if [[ "$filename" == *.exe ]]; then
              content_type="application/octet-stream"
            else
              content_type="application/octet-stream"
            fi
            
            # Upload using curl
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: $content_type" \
              --data-binary @"$artifact" \
              "${upload_url%\{*}?name=$filename"
          fi
        done