name: Release Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-linux:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build binary
      env:
        GOOS: linux
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 1
      run: |
        mkdir -p ../build
        cd src
        OUTPUT_NAME="digests-api-linux-${{ matrix.arch }}"

        if [ "${{ matrix.arch }}" = "arm64" ]; then
          export CC=aarch64-linux-gnu-gcc
        fi

        go build -v -ldflags="-s -w" -o ../build/${OUTPUT_NAME} ./cmd/api
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: digests-api-linux-${{ matrix.arch }}
        path: build/digests-api-linux-${{ matrix.arch }}

  build-windows:
    name: Build Windows Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Install MinGW for cross-compilation
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64

    - name: Build binary
      env:
        GOOS: windows
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 1
      run: |
        cd src
        OUTPUT_NAME="digests-api-windows-${{ matrix.arch }}.exe"
        
        if [ "${{ matrix.arch }}" = "amd64" ]; then
          export CC=x86_64-w64-mingw32-gcc
        else
          # For Windows ARM64, we'll need to disable CGO for now
          export CGO_ENABLED=0
        fi
        
        go build -v -ldflags="-s -w" -o ../build/${OUTPUT_NAME} ./cmd/api
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: digests-api-windows-${{ matrix.arch }}
        path: build/digests-api-windows-${{ matrix.arch }}.exe

  build-darwin:
    name: Build macOS Binaries
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build binary
      env:
        GOOS: darwin
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 1
      run: |
        cd src
        OUTPUT_NAME="digests-api-darwin-${{ matrix.arch }}"
        go build -v -ldflags="-s -w" -o ../build/${OUTPUT_NAME} ./cmd/api
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: digests-api-darwin-${{ matrix.arch }}
        path: build/digests-api-darwin-${{ matrix.arch }}

  release:
    name: Create Release
    needs: [build-linux, build-windows, build-darwin]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create checksums
      run: |
        cd artifacts
        find . -type f -name "digests-api-*" -exec sha256sum {} \; > ../checksums.txt
        mv ../checksums.txt .

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*/digests-api-*
          artifacts/checksums.txt
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}