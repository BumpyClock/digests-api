name: Build All Platforms

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'src/**'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/**'

jobs:
  build-linux:
    name: Build Linux ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install cross-compilation tools
      if: matrix.arch == 'arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build binary
      env:
        GOOS: linux
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 1
      run: |
        cd src
        OUTPUT_NAME="digests-api-linux-${{ matrix.arch }}"
        
        if [ "${{ matrix.arch }}" = "arm64" ]; then
          export CC=aarch64-linux-gnu-gcc
        fi
        
        echo "Building ${OUTPUT_NAME}..."
        mkdir -p ../build
        go build -v -ldflags="-s -w" -o ../build/${OUTPUT_NAME} ./cmd/api
        
        # Display binary info
        ls -lh ../build/${OUTPUT_NAME}
        file ../build/${OUTPUT_NAME} || true

    - name: Test binary execution (AMD64 only)
      if: matrix.arch == 'amd64'
      run: |
        cd build
        ./digests-api-linux-amd64 --help || echo "Binary built successfully"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: digests-api-linux-${{ matrix.arch }}
        path: build/digests-api-linux-${{ matrix.arch }}
        retention-days: 7

  build-quick:
    name: Quick build check (no CGO)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: windows
            arch: amd64
            suffix: ".exe"
          - os: darwin
            arch: amd64
            suffix: ""
          - os: darwin
            arch: arm64
            suffix: ""
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Build binary (CGO disabled)
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
        CGO_ENABLED: 0
      run: |
        cd src
        OUTPUT_NAME="digests-api-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.suffix }}"
        echo "Building ${OUTPUT_NAME} (without CGO)..."
        mkdir -p ../build
        go build -v -ldflags="-s -w" -o ../build/${OUTPUT_NAME} ./cmd/api || echo "Build failed - CGO may be required"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run tests
      run: |
        cd src
        go test -v -race -coverprofile=coverage.out ./...
        
    - name: Upload coverage
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: src/coverage.out
        retention-days: 7

  summary:
    name: Build Summary
    needs: [build-linux, build-quick, test]
    runs-on: ubuntu-latest
    steps:
    - name: Summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ Linux builds completed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Quick compatibility check completed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Tests completed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Note: Full cross-platform builds with CGO require platform-specific runners or the release workflow." >> $GITHUB_STEP_SUMMARY